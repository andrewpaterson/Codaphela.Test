#include "EmbeddedObjectTestClasses.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CEmbeddedTest::Class(void)
{
	UnmanagedInt(&miAmANumber, "miAmANumber");
	UnmanagedFloat(&mfSoAmI, "mfSoAmI");
	Pointer(mpTest.This(), "mpTest");
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CEmbeddedTest> CEmbeddedTest::Init(void)
{
	PreInit();
	miAmANumber = 85;
	mfSoAmI = 58.0f;

	PostInit();
	return Ptr<CEmbeddedTest>(this);
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CEmbeddedTest::Free(void)
{
	miAmANumber = 0;
	mfSoAmI = 0.0f;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CEmbeddedTest::Save(CObjectWriter* pcFile)
{
	pcFile->WriteInt(miAmANumber);
	pcFile->WriteFloat(mfSoAmI);

	return TRUE;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CEmbeddedTest::Load(CObjectReader* pcFile)
{
	pcFile->ReadInt(&miAmANumber);
	pcFile->ReadFloat(&mfSoAmI);
	
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CEmbeddedContainer::Class(void)
{
	char	msz[4];
	int		mi;
	float	mf;

	UnmanagedChar(msz, 4, "msz");
	Pointer(mpTest.This(), "mpTest");
	Embedded(&mcOne, "mcOne");
	Embedded(&mcTwo, "mcTwo");
	UnmanagedInt(&mi, "mi");
	UnmanagedFloat(&mf, "mf");
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CEmbeddedContainer> CEmbeddedContainer::Init(void)
{
	PreInit();
	strcpy(msz, "And");
	mcOne.Init();
	mi = 73;
	mcTwo.Init();
	mf = 666.0f;

	PostInit();
	return Ptr<CEmbeddedContainer>(this);
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CEmbeddedContainer::Free(void)
{
	msz[0] = msz[1] = msz[2] = msz[3] = 0;
	mi = 0;
	mf = 0.0f;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CEmbeddedContainer::Save(CObjectWriter* pcFile)
{
	pcFile->WriteData(msz, 4);
	pcFile->WriteInt(mi);
	pcFile->WriteFloat(mf);

	return TRUE;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CEmbeddedContainer::Load(CObjectReader* pcFile)
{
	pcFile->ReadData(msz, 4);
	pcFile->ReadInt(&mi);
	pcFile->ReadFloat(&mf);

	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CEmbeddedComplex::Class(void)
{
	Pointer(mpTest.This(), "mpTest");
	UnmanagedInt(mai, 2, "mai");
	Embedded(&mcSimple, "mcSimple");
	Embedded(&ma, "ma");
	Embedded(&mcContainer, "mcContainer");
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CEmbeddedComplex> CEmbeddedComplex::Init(void)
{
	PreInit();
	mcSimple.Init();
	mai[0] = 1;
	mai[1] = 2;
	ma.Init();
	mcContainer.Init();

	PostInit();
	return Ptr<CEmbeddedComplex>(this);
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CEmbeddedComplex::Free(void)
{
	mai[0] = 0;
	mai[1] = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CEmbeddedComplex::Save(CObjectWriter* pcFile)
{
	pcFile->WriteInt(mai[0]);
	pcFile->WriteInt(mai[1]);

	return TRUE;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CEmbeddedComplex::Load(CObjectReader* pcFile)
{
	pcFile->ReadInt(&mai[0]);
	pcFile->ReadInt(&mai[1]);

	return TRUE;
}

