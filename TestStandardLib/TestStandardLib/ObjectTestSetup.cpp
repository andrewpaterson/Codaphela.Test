#include "StandardLib/Objects.h"
#include "StandardLib/ObjectSerialiser.h"
#include "StandardLib/ObjectDeserialiser.h"
#include "ObjectTestSetup.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGraphicPicture::Init(void)
{
	strcpy(mszPretenedImAPicture, "012345678901234");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGraphicPicture::Kill(void)
{
	strcpy(mszPretenedImAPicture, "Alas I am Dead!");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CPlayerVehicle> CPlayerVehicle::Init(void)
{
	PreInit();
	mpsPoint = (SPhysicsPoint*)malloc(sizeof(SPhysicsPoint));
	mcPicture.Init();

	mpsPoint->x = 'X';
	mpsPoint->y = 'Y';
	mpsPoint->z = 'Z';

	mpsBeforeDeath = NULL;
	mpsAfterDeath = NULL;

	PostInit();
	return Ptr<CPlayerVehicle>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlayerVehicle::Class(void)
{
	CObject::Class();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlayerVehicle::Free(void)
{
	if (mpsBeforeDeath)
	{
		memcpy(&mpsBeforeDeath->sPoint, mpsPoint, sizeof(SPhysicsPoint));
		memcpy(&mpsBeforeDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));
	}

	mcPicture.Kill();
	free(mpsPoint);
	mpsPoint = NULL;

	if (mpsAfterDeath)
	{
		memset(&mpsAfterDeath->sPoint, 0, sizeof(SPhysicsPoint));
		memcpy(&mpsAfterDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlayerVehicle::SetKillHook(SStateOnKill* psBeforeDeath, SStateOnKill* psAfterDeath)
{
	mpsBeforeDeath = psBeforeDeath;
	mpsAfterDeath = psAfterDeath;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CHarrier> CHarrier::Init(Ptr<CGameWorld> pWorld)
{
	PreInit();

	CPlayerVehicle::Init();
	mpWorld = pWorld;
	miSpeed = 7;

	maMissiles = OMalloc<CArrayObject>();

	PostInit();
	return Ptr<CHarrier>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CHarrier::Class(void)
{
	CPlayerVehicle::Class();
	Pointer(mpWorld.This(), "mpWorld");
	Pointer(maMissiles.This(), "maMissiles");
	Unmanaged(&miSpeed, "miSpeed");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CHarrier::Free(void)
{
	CPlayerVehicle::Free();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CMissile> CHarrier::FireMissile(CPointer& pTarget)
{
	Ptr<CMissile> pMissile = OMalloc<CMissile>(mpWorld);
	maMissiles->Add(pMissile);
	pMissile->SetTarget(pTarget);

	mpWorld->AddTickable(pMissile);

	return pMissile;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CArrayObject> CHarrier::GetMissiles(void)
{
	return maMissiles;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CJeep> CJeep::Init(Ptr<CGameWorld> pWorld)
{
	PreInit();

	CPlayerVehicle::Init();
	mpWorld = pWorld;
	mfBackWheel = 2.3f;
	mfFrontWheel = 2.1f;

	PostInit();
	return Ptr<CJeep>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJeep::Class(void)
{
	CPlayerVehicle::Class();
	Pointer(mpWorld.This(), "mpWorld");
	Unmanaged(&mfFrontWheel, "mfFrontWheel");
	Unmanaged(&mfBackWheel, "mfBackWheel");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJeep::Free(void)
{
	CPlayerVehicle::Free();
	mfBackWheel = 0.0f;
	mfFrontWheel = 0.0f;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CMissile> CMissile::Init(Ptr<CGameWorld> pWorld)
{
	PreInit();
	mpWorld = pWorld;
	mpTarget = NULL;

	mszKillState = NULL;

	PostInit();
	return Ptr<CMissile>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMissile::Class(void)
{
	CObject::Class();
	Pointer(mpWorld.This(), "mpWorld");
	Pointer(mpTarget.This(), "mpTarget");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMissile::Free(void)
{
	if (mszKillState)
	{
		strcpy(mszKillState, "Killed");
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CPointer CMissile::GetTarget(void)
{
	return mpTarget;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMissile::SetTarget(CPointer& pTarget)
{
	mpTarget = pTarget;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMissile::SetKillString(char* szKillString)
{
	mszKillState = szKillString;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CRedJet> CRedJet::Init(Ptr<CGameWorld> pWorld)
{
	PreInit();

	mpsPoint = (SPhysicsPoint*)malloc(sizeof(SPhysicsPoint));
	mcPicture.Init();

	mpWorld = pWorld;

	Ptr<CRedJet> pThis;
	pThis = this;
	mpWorld->AddTickable(pThis);

	PostInit();
	return Ptr<CRedJet>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CRedJet::Class(void)
{
	CObject::Class();
	Pointer(mpWorld.This(), "mpWorld");
	Unmanaged(&mcPicture, sizeof(CGraphicPicture), "mcPicture");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CRedJet::Free(void)
{
	memcpy(&mpsBeforeDeath->sPoint, mpsPoint, sizeof(SPhysicsPoint));
	memcpy(&mpsBeforeDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));

	mcPicture.Kill();
	free(mpsPoint);
	mpsPoint = NULL;

	memset(&mpsAfterDeath->sPoint, 0, sizeof(SPhysicsPoint));
	memcpy(&mpsAfterDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CRedJet::SetKillHook(SStateOnKill* psBeforeDeath, SStateOnKill* psAfterDeath)
{
	mpsBeforeDeath = psBeforeDeath;
	mpsAfterDeath = psAfterDeath;

	strcpy(mpsBeforeDeath->cPicture.mszPretenedImAPicture, "Kill not called");
	strcpy(mpsAfterDeath->cPicture.mszPretenedImAPicture, "Kill not called");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CClusterMissile> CClusterMissile::Init(Ptr<CGameWorld> pWorld)
{
	PreInit();

	mcMissile1.Init(pWorld);
	mcMissile2.Init(pWorld);

	mszKillState = NULL;

	PostInit();
	return Ptr<CClusterMissile>(this);
}



//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CClusterMissile::Class(void)
{
	CObject::Class();
	Pointer(mpWorld.This(), "mpWorld");
	Embedded(&mcMissile1, "mcMissile1");
	Embedded(&mcMissile2, "mcMissile2");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CClusterMissile::Free(void)
{
	if (mszKillState)
	{
		strcpy(mszKillState, "Killed");
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CClusterMissile::SetKillString(char* szKillString)
{
	mszKillState = szKillString;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CClusterLauncher> CClusterLauncher::Init(void)
{
	PreInit();
	PostInit();
	return Ptr<CClusterLauncher>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CClusterLauncher::Free(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CClusterLauncher::Class(void)
{
	CObject::Class();
	Pointer(mpMissile.This(), "mpMissile");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CGameWorld> CGameWorld::Init(void)
{
	PreInit();
	maTickables = OMalloc<CArrayObject>();
	PostInit();
	return Ptr<CGameWorld>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::Free(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::Class(void)
{
	CObject::Class();
	Pointer(maTickables.This(), "maTickables");
	Pointer(mpPlayer1.This(), "mpPlayer1");
	Pointer(mpPlayer2.This(), "mpPlayer2");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::AddPlayer(Ptr<CPlayerVehicle> pPlayer)
{
	if (pPlayer.IsNull())
	{
		return;
	}

	if (mpPlayer1.IsNull())
	{
		mpPlayer1 = pPlayer;
	}
	else if (mpPlayer2.IsNull())
	{
		mpPlayer2 = pPlayer;
	}
	else
	{
		return;
	}

	maTickables->Add(pPlayer);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::AddTickable(CPointer& pTickable)
{
	if (pTickable.IsNotNull())
	{
		maTickables->Add(pTickable);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::RemoveTickable(CPointer& pTickable)
{
	if (pTickable.IsNotNull())
	{
		maTickables->Remove(pTickable);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CGameWorld::Save(CObjectSerialiser* pcFile)
{
	ReturnOnFalse(pcFile->WritePointer(maTickables));
	ReturnOnFalse(pcFile->WritePointer(mpPlayer1));
	ReturnOnFalse(pcFile->WritePointer(mpPlayer2));
	return TRUE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CGameWorld::Load(CObjectDeserialiser* pcFile)
{
	ReturnOnFalse(pcFile->ReadPointer(maTickables.This()));
	ReturnOnFalse(pcFile->ReadPointer(mpPlayer1.This()));
	ReturnOnFalse(pcFile->ReadPointer(mpPlayer2.This()));
	return TRUE; 
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CArrayObject> CGameWorld::GetTickables(void)
{
	return maTickables;
}

