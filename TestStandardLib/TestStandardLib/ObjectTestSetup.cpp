#include "StandardLib/Objects.h"
#include "ObjectTestSetup.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGraphicPicture::Init(void)
{
	strcpy(mszPretenedImAPicture, "012345678901234");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGraphicPicture::Kill(void)
{
	strcpy(mszPretenedImAPicture, "Alas I am Dead!");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlayerVehicle::Init(void)
{
	mpsPoint = (SPhysicsPoint*)malloc(sizeof(SPhysicsPoint));
	mcPicture.Init();

	mpsPoint->x = 'X';
	mpsPoint->y = 'Y';
	mpsPoint->z = 'Z';

	mpsBeforeDeath = NULL;
	mpsAfterDeath = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlayerVehicle::KillData(void)
{
	memcpy(&mpsBeforeDeath->sPoint, mpsPoint, sizeof(SPhysicsPoint));
	memcpy(&mpsBeforeDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));

	free(mpsPoint);
	mpsPoint = NULL;
	mcPicture.Kill();

	memset(&mpsAfterDeath->sPoint, 0, sizeof(SPhysicsPoint));
	memcpy(&mpsAfterDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlayerVehicle::SetKillHook(SStateOnKill* psBeforeDeath, SStateOnKill* psAfterDeath)
{
	mpsBeforeDeath = psBeforeDeath;
	mpsAfterDeath = psAfterDeath;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CHarrier::Init(Ptr<CGameWorld> pWorld)
{
	CPlayerVehicle::Init();

	Pointer(mpWorld.This());
	Pointer(maMissiles.This());

	mpWorld = pWorld;
	miSpeed = 7;

	maMissiles = OMalloc(CArray);
	maMissiles->Init();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CHarrier::KillData(void)
{
	CPlayerVehicle::KillData();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CMissile> CHarrier::FireMissile(CPointerObject pTarget)
{
	Ptr<CMissile> pMissile = OMalloc(CMissile);
	pMissile->Init(mpWorld);
	maMissiles->Add(pMissile);
	pMissile->SetTarget(pTarget);

	mpWorld->AddTickable(pMissile);

	return pMissile;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CArray> CHarrier::GetMissiles(void)
{
	return maMissiles;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJeep::Init(Ptr<CGameWorld> pWorld)
{
	CPlayerVehicle::Init();

	Pointer(mpWorld.This());

	mpWorld = pWorld;
	mfBackWheel = 2.3f;
	mfFrontWheel = 2.1f;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJeep::KillData(void)
{
	CPlayerVehicle::KillData();
	mfBackWheel = 0.0f;
	mfFrontWheel = 0.0f;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMissile::Init(Ptr<CGameWorld> pWorld)
{
	Pointer(mpWorld.This());
	Pointer(mpTarget.This());

	mpWorld = pWorld;
	mpTarget = NULL;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMissile::KillData(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CPointerObject CMissile::GetTarget(void)
{
	return mpTarget;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMissile::SetTarget(CPointerObject pTarget)
{
	mpTarget = pTarget;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CRedJet::Init(Ptr<CGameWorld> pWorld)
{
	Pointer(mpWorld.This());

	mpsPoint = (SPhysicsPoint*)malloc(sizeof(SPhysicsPoint));
	mcPicture.Init();

	mpWorld = pWorld;

	Ptr<CRedJet> pThis;
	pThis = this;
	mpWorld->AddTickable(pThis);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CRedJet::KillData(void)
{
	memcpy(&mpsBeforeDeath->sPoint, mpsPoint, sizeof(SPhysicsPoint));
	memcpy(&mpsBeforeDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));

	free(mpsPoint);
	mpsPoint = NULL;
	mcPicture.Kill();

	memset(&mpsAfterDeath->sPoint, 0, sizeof(SPhysicsPoint));
	memcpy(&mpsAfterDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CRedJet::SetKillHook(SStateOnKill* psBeforeDeath, SStateOnKill* psAfterDeath)
{
	mpsBeforeDeath = psBeforeDeath;
	mpsAfterDeath = psAfterDeath;

	strcpy(mpsBeforeDeath->cPicture.mszPretenedImAPicture, "Kill not called");
	strcpy(mpsAfterDeath->cPicture.mszPretenedImAPicture, "Kill not called");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::Init(void)
{
	Pointer(mpPlayer1.This());
	Pointer(mpPlayer2.This());
	Pointer(maTickables.This());

	maTickables = OMalloc(CArray);
	maTickables->Init(128);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::KillData(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::AddPlayer(Ptr<CPlayerVehicle> pPlayer)
{
	if (pPlayer.IsNull())
	{
		return;
	}

	if (mpPlayer1.IsNull())
	{
		mpPlayer1 = pPlayer;
	}
	else if (mpPlayer2.IsNull())
	{
		mpPlayer2 = pPlayer;
	}
	else
	{
		return;
	}

	maTickables->Add(pPlayer);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::AddTickable(CPointerObject pTickable)
{
	if (pTickable.IsNotNull())
	{
		maTickables->Add(pTickable);
	}
}

