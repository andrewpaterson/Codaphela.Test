#include "StandardLib/Objects.h"
#include "ObjectTestSetup.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGraphicPicture::Init(void)
{
	strcpy(mszPretenedImAPicture, "012345678901234");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGraphicPicture::Kill(void)
{
	strcpy(mszPretenedImAPicture, "Alas I am Dead!");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CPlayerVehicle> CPlayerVehicle::Init(void)
{
	mpsPoint = (SPhysicsPoint*)malloc(sizeof(SPhysicsPoint));
	mcPicture.Init();

	mpsPoint->x = 'X';
	mpsPoint->y = 'Y';
	mpsPoint->z = 'Z';

	mpsBeforeDeath = NULL;
	mpsAfterDeath = NULL;

	return Ptr<CPlayerVehicle>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlayerVehicle::KillData(void)
{
	if (mpsBeforeDeath)
	{
		memcpy(&mpsBeforeDeath->sPoint, mpsPoint, sizeof(SPhysicsPoint));
		memcpy(&mpsBeforeDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));
	}

	free(mpsPoint);
	mpsPoint = NULL;
	mcPicture.Kill();

	if (mpsAfterDeath)
	{
		memset(&mpsAfterDeath->sPoint, 0, sizeof(SPhysicsPoint));
		memcpy(&mpsAfterDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CPlayerVehicle::SetKillHook(SStateOnKill* psBeforeDeath, SStateOnKill* psAfterDeath)
{
	mpsBeforeDeath = psBeforeDeath;
	mpsAfterDeath = psAfterDeath;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CHarrier> CHarrier::Init(Ptr<CGameWorld> pWorld)
{
	CPlayerVehicle::Init();

	Pointer(mpWorld.This());
	Pointer(maMissiles.This());

	mpWorld = pWorld;
	miSpeed = 7;

	maMissiles = OMalloc(CArrayObject);
	maMissiles->Init();

	return Ptr<CHarrier>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CHarrier::KillData(void)
{
	CPlayerVehicle::KillData();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CMissile> CHarrier::FireMissile(CPointer pTarget)
{
	Ptr<CMissile> pMissile = OMalloc(CMissile);
	pMissile->Init(mpWorld);
	maMissiles->Add(pMissile);
	pMissile->SetTarget(pTarget);

	mpWorld->AddTickable(pMissile);

	return pMissile;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CArrayObject> CHarrier::GetMissiles(void)
{
	return maMissiles;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CJeep> CJeep::Init(Ptr<CGameWorld> pWorld)
{
	CPlayerVehicle::Init();

	Pointer(mpWorld.This());

	mpWorld = pWorld;
	mfBackWheel = 2.3f;
	mfFrontWheel = 2.1f;

	return Ptr<CJeep>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CJeep::KillData(void)
{
	CPlayerVehicle::KillData();
	mfBackWheel = 0.0f;
	mfFrontWheel = 0.0f;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CMissile> CMissile::Init(Ptr<CGameWorld> pWorld)
{
	Pointer(mpWorld.This());
	Pointer(mpTarget.This());

	mpWorld = pWorld;
	mpTarget = NULL;

	return Ptr<CMissile>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMissile::KillData(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
CPointer CMissile::GetTarget(void)
{
	return mpTarget;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CMissile::SetTarget(CPointer pTarget)
{
	mpTarget = pTarget;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CRedJet> CRedJet::Init(Ptr<CGameWorld> pWorld)
{
	Pointer(mpWorld.This());

	mpsPoint = (SPhysicsPoint*)malloc(sizeof(SPhysicsPoint));
	mcPicture.Init();

	mpWorld = pWorld;

	Ptr<CRedJet> pThis;
	pThis = this;
	mpWorld->AddTickable(pThis);

	return Ptr<CRedJet>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CRedJet::KillData(void)
{
	memcpy(&mpsBeforeDeath->sPoint, mpsPoint, sizeof(SPhysicsPoint));
	memcpy(&mpsBeforeDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));

	free(mpsPoint);
	mpsPoint = NULL;
	mcPicture.Kill();

	memset(&mpsAfterDeath->sPoint, 0, sizeof(SPhysicsPoint));
	memcpy(&mpsAfterDeath->cPicture, &mcPicture, sizeof(CGraphicPicture));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CRedJet::SetKillHook(SStateOnKill* psBeforeDeath, SStateOnKill* psAfterDeath)
{
	mpsBeforeDeath = psBeforeDeath;
	mpsAfterDeath = psAfterDeath;

	strcpy(mpsBeforeDeath->cPicture.mszPretenedImAPicture, "Kill not called");
	strcpy(mpsAfterDeath->cPicture.mszPretenedImAPicture, "Kill not called");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CClusterMissile> CClusterMissile::Init(Ptr<CGameWorld> pWorld)
{
	Pointer(mpWorld.This());
	Embedded(&mcMissile1);
	Embedded(&mcMissile2);

	mcMissile1.Init(pWorld);
	mcMissile2.Init(pWorld);

	return Ptr<CClusterMissile>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CClusterMissile::KillData(void)
{
	mcMissile1.Kill();
	mcMissile2.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CClusterLauncher> CClusterLauncher::Init(void)
{
	Pointer(mpMissile.This());
	return Ptr<CClusterLauncher>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CClusterLauncher::KillData(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CGameWorld> CGameWorld::Init(void)
{
	Pointer(mpPlayer1.This());
	Pointer(mpPlayer2.This());
	Pointer(maTickables.This());

	maTickables = OMalloc(CArrayObject);
	maTickables->Init(128);

	return Ptr<CGameWorld>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::KillData(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::AddPlayer(Ptr<CPlayerVehicle> pPlayer)
{
	if (pPlayer.IsNull())
	{
		return;
	}

	if (mpPlayer1.IsNull())
	{
		mpPlayer1 = pPlayer;
	}
	else if (mpPlayer2.IsNull())
	{
		mpPlayer2 = pPlayer;
	}
	else
	{
		return;
	}

	maTickables->Add(pPlayer);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::AddTickable(CPointer pTickable)
{
	if (pTickable.IsNotNull())
	{
		maTickables->Add(pTickable);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CGameWorld::RemoveTickable(CPointer pTickable)
{
	if (pTickable.IsNotNull())
	{
		maTickables->Remove(pTickable);
	}
}

