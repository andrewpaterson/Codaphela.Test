#include "StandardLib/ObjectWriter.h"
#include "StandardLib/ObjectReader.h"
#include "NamedObjectTestClasses.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CTestNamedObject> CTestNamedObject::Init(int iNum)
{
	PreInit();
	miNum = iNum;

	PostInit();
	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestNamedObject::Class(void)
{
	Pointer(mpNamedTest1.This(), "mpNamedTest1");
	Pointer(mpNamedTest2.This(), "mpNamedTest2");
	UnmanagedInt(&miNum, "miNum");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestNamedObject::Free(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestNamedObject::Save(CObjectWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteInt32(miNum));
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestNamedObject::Load(CObjectReader* pcFile)
{
	ReturnOnFalse(pcFile->ReadInt32(&miNum));
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CTestNamedObjectSmall> CTestNamedObjectSmall::Init(char* sz)
{
	return Init((const char*)sz);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CTestNamedObjectSmall> CTestNamedObjectSmall::Init(const char* sz)
{
	PreInit();

	memset(mac, 0, 4);
	StrCpySafe(mac, sz, 4);

	PostInit();
	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestNamedObjectSmall::Class(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestNamedObjectSmall::Free(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestNamedObjectSmall::Save(CObjectWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteData(mac, 4));
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestNamedObjectSmall::Load(CObjectReader* pcFile)
{
	ReturnOnFalse(pcFile->ReadData(mac, 4));
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CTestNamedObjectWithEmbedded> CTestNamedObjectWithEmbedded::Init(int iX, int iY, int iName1, int iName2, CPointer pObject, Ptr<CTestNamedObjectSmall> pSmall)
{
	PreInit();

	miX = iX;
	miY = iY;
	mNamedTest1.Init(iName1);
	mNamedTest2.Init(iName2);
	mpObject = pObject;
	mpSmall = pSmall;
	mpvUnmanaged = NULL;
	miUnmagedSize = 0;

	PostInit();
	return this;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestNamedObjectWithEmbedded::Class(void)
{
	Pointer(mpObject.This(), "mpObject");
	Pointer(mpSmall.This(), "mpSmall");
	Embedded(&mNamedTest1, "mNamedTest1");
	Embedded(&mNamedTest2, "mNamedTest2");
	UnmanagedInt(&miX, "miX");
	UnmanagedInt(&miY, "miY");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestNamedObjectWithEmbedded::Free(void)
{
	SafeFree(mpvUnmanaged);
	miUnmagedSize = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestNamedObjectWithEmbedded::Save(CObjectWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteInt32(miX));
	ReturnOnFalse(pcFile->WriteInt32(miY));
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestNamedObjectWithEmbedded::Load(CObjectReader* pcFile)
{
	mpvUnmanaged = NULL;
	miUnmagedSize = 0;

	ReturnOnFalse(pcFile->ReadInt32(&miX));
	ReturnOnFalse(pcFile->ReadInt32(&miY));
	return true;
}


