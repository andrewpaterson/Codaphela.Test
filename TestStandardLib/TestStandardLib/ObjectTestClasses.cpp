#include "StandardLib/ObjectWriter.h"
#include "StandardLib/ObjectReader.h"
#include "ObjectTestClasses.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::Init(void)
{
	Init(NULL);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::Init(CPointer pObject, Ptr<CTestObject> pTest)
{
	Init(NULL);
	mpObject = pObject;
	mpTest = pTest;
}



//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::Init(STestObjectFreedNotifier* psKilledNotifier)
{
	PreInit();
	mpsFreedNotifier = psKilledNotifier;
	mi = 0x07070707;
	if (mpsFreedNotifier)
	{
		mpsFreedNotifier->bFreed= false;
	}

	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::Class(void)
{
	Pointer(mpObject.This(), "mpObject");
	Pointer(mpTest.This(), "mpTest");
	UnmanagedInt(&mi, "mi");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::Free(void)
{
	if (mpsFreedNotifier)
	{
		mpsFreedNotifier->bFreed = true;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestObject::Save(CObjectWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteInt32(mi));
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestObject::Load(CObjectReader* pcFile)
{
	ReturnOnFalse(pcFile->ReadInt32(&mi));
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::SomeMethod(void)
{
	mi = 0x90909090;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestTriPointerObject::Init(void)
{
	Init(NULL);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestTriPointerObject::Init(STestObjectFreedNotifier* psKilledNotifier)
{
	PreInit();
	mpsFreedNotifier = psKilledNotifier;
	if (mpsFreedNotifier)
	{
		mpsFreedNotifier->bFreed = false;
	}
	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestTriPointerObject::Class(void)
{
	Pointer(mpObject1.This(), "mpObject1");
	Pointer(mpObject2.This(), "mpObject2");
	Pointer(mpObject3.This(), "mpObject3");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestTriPointerObject::Free(void)
{
	if (mpsFreedNotifier)
	{
		mpsFreedNotifier->bFreed = true;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject1::Init(void)
{
	PreInit();
	miInt = 7;
	mszString.Init();
	mbSaved = false;

	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject1::Class(void)
{
	Pointer(mpObject.This(), "mpObject");
	UnmanagedInt(&miInt, "miInt");
	UnmanagedString(&mszString, "mszString");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject1::Free(void)
{
	mszString.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestSaveableObject1::Save(CObjectWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteInt32(miInt));
	ReturnOnFalse(mszString.WriteString(pcFile));

	mbSaved = true;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestSaveableObject1::Load(CObjectReader* pcFile)
{
	ReturnOnFalse(pcFile->ReadInt32(&miInt));
	ReturnOnFalse(mszString.ReadString(pcFile));

	mbSaved = false;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject2::Init(const char* psz)
{
	PreInit();
	msz.Init(psz);
	mbSaved = false;
	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject2::Class(void)
{
	Pointer(mp1.This(), "mp1");
	Pointer(mp2.This(), "mp2");
	UnmanagedString(&msz, "msz");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject2::Free(void)
{
	msz.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestSaveableObject2::Save(CObjectWriter* pcFile)
{
	msz.WriteString(pcFile);
	mbSaved = true;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestSaveableObject2::Load(CObjectReader* pcFile)
{
	msz.ReadString(pcFile);
	mbSaved = false;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Init(void)
{
	PreInit();

	mpsz = NULL;

	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Init(CPointer pObject, Ptr<CTestObject> pTest)
{
	Init();
	mpObject = pObject;
	mpTest = pTest;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Class(void)
{
	Pointer(mpTest.This(), "mpTest");
	Pointer(mpObject.This(), "mpObject");

	Primitive(&mi32, "mi32");
	Primitive(&mi8, "mi8");
	Primitive(&mui8, "mui8");
	Primitive(&mui32, "mui32");
	Primitive(&mi16, "mi16");
	Primitive(&mui16, "mui16");
	Primitive(&mc8, "mc8");
	Primitive(&mc16, "mc16");
	Primitive(&mf32, "mf32");
	Primitive(&mf64, "mf64");
	Primitive(&mi64, "mi64");
	Primitive(&mui64, "mui64");
	Primitive(&mb, "mb");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Free(void)
{
	SafeFree(mpsz);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Update(int8 i8)
{
	mi8 = i8;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Update(char* sz)
{
	mpsz = sz;
	SetDirty(true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedObjectWithFields::Init(void)
{
	PreInit();
	mcEmbedded1.Init();
	mcEmbedded2.Init();
	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedObjectWithFields::Class(void)
{
	Primitive(&mbX, "mbX");
	Pointer(mpObjectA.This(), "mpObjectA");
	Embedded(&mcEmbedded1, "mcEmbedded1");
	Pointer(mpObjectB.This(), "mpObjectB");
	Embedded(&mcEmbedded2, "mcEmbedded2");
	Pointer(mpObjectC.This(), "mpObjectC");
	Primitive(&mbY, "mbY");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedObjectWithFields::Free(void)
{
	mcEmbedded1.Free();
	mcEmbedded2.Free();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedStrings::Init(void)
{
	PreInit();
	mString1.Init();
	mString2.Init();
	mString3.Init();
	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedStrings::Class(void)
{
	Embedded(&mString1, "mString1");
	Embedded(&mString2, "mString2");
	Embedded(&mString3, "mString3");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedStrings::Free(void)
{
	mString1.Free();
	mString2.Free();
	mString3.Free();
}

