#include "StandardLib/ObjectWriter.h"
#include "StandardLib/ObjectReader.h"
#include "StandardLib/ClassDefines.h"
#include "ObjectTestClasses.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::Init(void)
{
	Init(NULL);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::Init(CPointer pObject, Ptr<CTestObject> pTest)
{
	Init(NULL);
	mpObject = pObject;
	mpTest = pTest;
}



//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::Init(STestObjectFreedNotifier* psKilledNotifier)
{
	PreInit();
	mpsFreedNotifier = psKilledNotifier;
	mi = 0x07070707;
	if (mpsFreedNotifier)
	{
		mpsFreedNotifier->bFreed= false;
	}

	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::Class(void)
{
	M_Pointer(mpObject);
	M_Pointer(mpTest);
	U_SInt(mi);
	//For some reason uncommenting this breaks the TestObjectDirtyOnPrimitiveAssignmentWithEmbedded test.
	//U_Pointer(mpsFreedNotifier);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::Free(void)
{
	if (mpsFreedNotifier)
	{
		mpsFreedNotifier->bFreed = true;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestObject::Save(CObjectWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteInt32(mi));
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestObject::Load(CObjectReader* pcFile)
{
	ReturnOnFalse(pcFile->ReadInt32(&mi));
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObject::SomeMethod(void)
{
	mi = 0x90909090;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestTriPointerObject::Init(void)
{
	Init(NULL);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestTriPointerObject::Init(STestObjectFreedNotifier* psKilledNotifier)
{
	PreInit();

	mpsFreedNotifier = psKilledNotifier;
	if (mpsFreedNotifier)
	{
		mpsFreedNotifier->bFreed = false;
	}

	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestTriPointerObject::Class(void)
{
	M_Pointer(mpObject1);
	M_Pointer(mpObject2);
	M_Pointer(mpObject3);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestTriPointerObject::Free(void)
{
	if (mpsFreedNotifier)
	{
		mpsFreedNotifier->bFreed = true;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject1::Init(void)
{
	PreInit();

	miInt = 7;
	mszString.Init();
	mbSaved = false;

	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject1::Class(void)
{
	M_Pointer(mpObject);
	U_Int32(miInt);
	U_String(mszString);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject1::Free(void)
{
	mszString.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestSaveableObject1::Save(CObjectWriter* pcFile)
{
	ReturnOnFalse(pcFile->WriteInt32(miInt));
	ReturnOnFalse(mszString.WriteString(pcFile));

	mbSaved = true;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestSaveableObject1::Load(CObjectReader* pcFile)
{
	ReturnOnFalse(pcFile->ReadInt32(&miInt));
	ReturnOnFalse(mszString.ReadString(pcFile));

	mbSaved = false;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject2::Init(const char* psz)
{
	PreInit();

	msz.Init(psz);
	mbSaved = false;

	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject2::Class(void)
{
	M_Pointer(mp1);
	M_Pointer(mp2);
	U_String(msz);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestSaveableObject2::Free(void)
{
	msz.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestSaveableObject2::Save(CObjectWriter* pcFile)
{
	msz.WriteString(pcFile);
	mbSaved = true;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
bool CTestSaveableObject2::Load(CObjectReader* pcFile)
{
	msz.ReadString(pcFile);
	mbSaved = false;
	return true;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Init(void)
{
	PreInit();

	mpsz = NULL;

	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Init(CPointer pObject, Ptr<CTestObject> pTest)
{
	Init();
	mpObject = pObject;
	mpTest = pTest;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Class(void)
{
	M_Pointer(mpTest);
	M_Pointer(mpObject);

	M_Int8(mi8);
	M_UInt8(mui8);
	M_Int32(mi32);
	M_UInt32(mui32);
	M_Int16(mi16);
	M_UInt16(mui16);
	M_Char8(mc8);
	M_Char16(mc16);
	M_Float32(mf32);
	M_Float64(mf64);
	M_Int64(mi64);
	M_UInt64(mui64);
	M_Bool(mb);

	U_Pointer(mpsz);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Free(void)
{
	SafeFree(mpsz);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Update(int8 i8)
{
	mi8 = i8;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestObjectWithFields::Update(char* sz)
{
	mpsz = sz;
	SetDirty(true);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedObjectWithFields::Init(void)
{
	PreInit();

	mcEmbedded1.Init();
	mcEmbedded2.Init();

	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedObjectWithFields::Class(void)
{
	M_Bool(mbX);
	M_Pointer(mpObjectA);
	M_Embedded(mcEmbedded1);
	M_Pointer(mpObjectB);
	M_Embedded(mcEmbedded2);
	M_Pointer(mpObjectC);
	M_Bool(mbY);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedObjectWithFields::Free(void)
{
	mcEmbedded1.Free();
	mcEmbedded2.Free();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedStrings::Init(void)
{
	PreInit();
	mString1.Init();
	mString2.Init();
	mString3.Init();
	PostInit();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedStrings::Class(void)
{
	M_Embedded(mString1);
	M_Embedded(mString2);
	M_Embedded(mString3);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTestEmbeddedStrings::Free(void)
{
	mString1.Free();
	mString2.Free();
	mString3.Free();
}

